# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import requests  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
import pandas as pd  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü (DataFrame)
import time  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from telegram import Update, Bot, ReplyKeyboardMarkup  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters
from config import TELEGRAM_TOKEN  # Telegram-—Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º

bot_token = TELEGRAM_TOKEN


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (symbol)
def get_data(symbol):
    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ
    url = "https://api.binance.com/api/v3/klines"
    # –ó–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (1 –º–∏–Ω—É—Ç–∞)
    params = {"symbol": symbol, "interval": "1m", "limit": 61}
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
    response = requests.get(url, params=params).json()
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data = []
    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤–µ—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    for candle in response:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        item = {"price": float(candle[4]), "time": int(candle[6])}
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        data.append(item)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    return data


def get_data(symbol):
    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    url = "https://fapi.binance.com/fapi/v1/klines"
    # –ó–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: —Å–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (1 –º–∏–Ω—É—Ç–∞)
    params = {"symbol": symbol, "interval": "1m", "limit": 61}
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
    response = requests.get(url, params=params)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
    if response.status_code != 200:
        print(f"{symbol} –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –∫–æ–¥ {response.status_code} –æ—Ç Binance API. –°–æ–æ–±—â–µ–Ω–∏–µ: {response.text}")
        return []

    response_data = response.json()

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data = []
    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤–µ—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    for candle in response_data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        item = {"price": float(candle[4]), "time": int(candle[6])}
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        data.append(item)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    return data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
def moving_average(data, period):
    # –°–æ–∑–¥–∞–µ–º DataFrame –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(data)
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Ü–µ–Ω —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    df["ma"] = df["price"].rolling(period).mean()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    return df["ma"].tolist()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    requests.post(url, data=data)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
def alert(change, base_asset, quote_asset, base_price):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    direction = "–≤–≤–µ—Ä—Ö" if change > 0 else "–≤–Ω–∏–∑"
    direction_emoji = "üìà" if change > 0 else "üìâ"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"{direction_emoji} –¶–µ–Ω–∞ {base_asset}/{quote_asset} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {change:.2f}% {direction}" \
              f" –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {base_price:.2f} {quote_asset}"
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return message


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
def settings(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    interval = context.user_data.get("interval", 3)
    alert_timeout = context.user_data.get("alert_timeout", 300)
    change_threshold = context.user_data.get("change_threshold", 1)
    base_asset = context.user_data.get("base_asset", "ETH")
    quote_asset = context.user_data.get("quote_asset", "USDT")
    message_id = update.effective_message.message_id
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_keyboard = [
        ["üìä –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã", "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", "üîï –¢–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
        ["üíπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–æ–≤"],
        ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    reply_markup = ReplyKeyboardMarkup(settings_keyboard, one_time_keyboard=True, resize_keyboard=True)

    current_settings_text = (
        "üîß *–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –∞–∫—Ç–∏–≤–æ–≤. –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"
        f"*–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤: {base_asset}/{quote_asset}*\n"
        f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {change_threshold}%\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {interval} —Å–µ–∫—É–Ω–¥\n"
        f"–¢–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {alert_timeout} —Å–µ–∫—É–Ω–¥\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
    )
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
    current_settings_text = current_settings_text.replace('.', r'\.')

    update.message.reply_text(current_settings_text, reply_markup=reply_markup, parse_mode='MarkdownV2')
    delete_message(context.bot, chat_id, message_id)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_callback(update: Update, context: CallbackContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö CallbackQuery
    query = update.callback_query
    query.answer()
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id
    if query.data == "settings":
        settings(update, context)
    elif query.data == "change_threshold":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_change_threshold (–Ω–∞–ø—Ä–∏–º–µ—Ä: /set_change_threshold 1)")
    elif query.data == "interval":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_interval (–Ω–∞–ø—Ä–∏–º–µ—Ä: /set_interval 5)")
    elif query.data == "alert_timeout":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_alert_timeout (–Ω–∞–ø—Ä–∏–º–µ—Ä: /set_alert_timeout 300)")
    delete_message(context.bot, chat_id, message_id)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
def help_command(update: Update, context: CallbackContext):
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω\n"
        "/set_change_threshold - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/set_interval - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
        "/set_alert_timeout - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:"
    )
    delete_message(context.bot, chat_id, message_id)


def set_assets(update: Update, context: CallbackContext):
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id

    try:
        base_asset = context.args[0]
        quote_asset = context.args[1]
        context.user_data["base_asset"] = base_asset
        context.user_data["quote_asset"] = quote_asset
        update.message.reply_text(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {base_asset}/{quote_asset}")
        delete_message(context.bot, chat_id, message_id)
        start(update, context)
    except (ValueError, IndexError):
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É –∞–∫—Ç–∏–≤–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_assets (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/set_assets DOGE USDT`)")
        delete_message(context.bot, chat_id, message_id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def text_message_handler(update: Update, context: CallbackContext):
    text = update.message.text
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return settings(update, context)
    elif text == "üìä –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã _\(–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö\)_ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set\_change\_threshold \(–Ω–∞–ø—Ä–∏–º–µ—Ä: `/set_change_threshold 1`\)", parse_mode='MarkdownV2')
    elif text == "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö _\(–≤ —Å–µ–∫—É–Ω–¥–∞—Ö\)_ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set\_interval \(–Ω–∞–ø—Ä–∏–º–µ—Ä: `/set_interval 5`\)", parse_mode='MarkdownV2')
    elif text == "‚åõ –¢–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è _\(–≤ —Å–µ–∫—É–Ω–¥–∞—Ö\)_ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set\_alert\_timeout \(–Ω–∞–ø—Ä–∏–º–µ—Ä: `/set_alert_timeout 300`\)", parse_mode='MarkdownV2')
    elif text == "üíπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–æ–≤":
        update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä—É –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ BASE/QUOTE \(–Ω–∞–ø—Ä–∏–º–µ—Ä, DOGE/USDT\) –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set\_assets \(–Ω–∞–ø—Ä–∏–º–µ—Ä: `/set_assets DOGE USDT`\)", parse_mode='MarkdownV2')
    elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        start(update, context)
    else:
        update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    delete_message(context.bot, chat_id, message_id)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_alert_timeout
def set_alert_timeout(update: Update, context: CallbackContext):
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id
    # –ò–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        new_timeout = int(context.args[0])
        context.user_data["alert_timeout"] = new_timeout
        update.message.reply_text(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_timeout} —Å–µ–∫—É–Ω–¥")
        delete_message(context.bot, chat_id, message_id)
        start(update, context)
    except (ValueError, IndexError):
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_alert_timeout")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_interval
def set_interval(update: Update, context: CallbackContext):
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id
    # –ò–∑–º–µ–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
    try:
        new_interval = int(context.args[0])
        context.user_data["interval"] = new_interval
        update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥")
        delete_message(context.bot, chat_id, message_id)
        start(update, context)
    except (ValueError, IndexError):
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_interval")
        delete_message(context.bot, chat_id, message_id)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_change_threshold
def set_threshold(update: Update, context: CallbackContext):
    message_id = update.effective_message.message_id
    chat_id = update.effective_chat.id
    # –ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        new_threshold = float(context.args[0])
        context.user_data["change_threshold"] = new_threshold
        update.message.reply_text(f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_threshold}%")
        delete_message(context.bot, chat_id, message_id)
        start(update, context)
    except (ValueError, IndexError):
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_change_threshold")
        delete_message(context.bot, chat_id, message_id)


# –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ –Ω–∞ Binance
def get_asset_price(asset: str, quote_asset: str = "USDT") -> float:
    if asset == quote_asset:
        return 1.0

    url = "https://api.binance.com/api/v3/ticker/price"
    params = {"symbol": f"{asset}{quote_asset}"}
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        return float(data["price"])
    except requests.exceptions.HTTPError as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: {e}")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def monitor_prices(context: CallbackContext):
    chat_id, alert_timeout, change_threshold, alert_timestamp, base_asset, quote_asset = context.job.context

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∏ –∞–∫—Ç–∏–≤–∞-–∫–æ—Ç–∏—Ä–æ–≤–∫–∏
    base_price = get_asset_price(base_asset, quote_asset)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∏ –∞–∫—Ç–∏–≤–∞-–∫–æ—Ç–∏—Ä–æ–≤–∫–∏
    data_base = get_data(f"{base_asset}{quote_asset}")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º 60 –º–∏–Ω—É—Ç
    ma_base = moving_average(data_base, 60)

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    change = (base_price - ma_base[-2]) / ma_base[-2] * 100

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ change_threshold
    if abs(change) >= change_threshold:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_timestamp = int(time.time())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –∏ –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if alert_timestamp is None or (current_timestamp - alert_timestamp) >= alert_timeout:
            message = alert(change, base_asset, quote_asset, base_price)
            if message:
                send_message(chat_id, message)
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                context.job.context = (chat_id, alert_timeout, change_threshold, current_timestamp, base_asset, quote_asset)

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω—å—à–µ change_threshold –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ
    elif abs(change) < change_threshold and alert_timestamp is not None:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        context.job.context = (chat_id, alert_timeout, change_threshold, None, base_asset, quote_asset)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_message(bot: Bot, chat_id, message_id):
    # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º chat_id –∏ message_id
    try:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    interval = context.user_data.get("interval", 3)
    alert_timeout = context.user_data.get("alert_timeout", 300)
    change_threshold = context.user_data.get("change_threshold", 1)
    base_asset = context.user_data.get("base_asset", "ETH")
    quote_asset = context.user_data.get("quote_asset", "USDT")
    alert_timestamp = 0

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    settings_button = [["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    reply_markup = ReplyKeyboardMarkup(settings_button, one_time_keyboard=True, resize_keyboard=True)

    message_id = update.effective_message.message_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç\! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—É {base_asset}/{quote_asset} –∏ –æ–ø–æ–≤–µ—â–∞—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\.\n\n"
        "–Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—Å–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ _\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1%\)_\.\n\n"
        "_–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –∏–ª–∏ –≤–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\._",
        reply_markup=reply_markup, parse_mode='MarkdownV2',
    )

    delete_message(context.bot, chat_id, message_id)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ monitor_prices –≤ JobQueue
    #context.job_queue.run_repeating(monitor_prices, interval, context=(chat_id, alert_timeout, change_threshold, alert_timestamp))
    context.job_queue.run_repeating(monitor_prices, interval, context=(chat_id, alert_timeout, change_threshold, alert_timestamp, base_asset, quote_asset), name=str(chat_id))


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop
def stop(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π Job –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id
    current_job = context.job_queue.get_jobs_by_name(str(chat_id))

    message_id = update.effective_message.message_id

    if current_job:
        current_job[0].schedule_removal()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")

    delete_message(context.bot, chat_id, message_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    updater = Updater(bot_token)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("set_change_threshold", set_threshold))
    dp.add_handler(CommandHandler("set_interval", set_interval))
    dp.add_handler(CommandHandler("set_alert_timeout", set_alert_timeout))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("stop", stop))
    dp.add_handler(CommandHandler("set_assets", set_assets))
    dp.add_handler(MessageHandler(Filters.text, text_message_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
    updater.start_polling()
    updater.idle()


# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é run_bot(), –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è
if __name__ == "__main__":
    run_bot()
